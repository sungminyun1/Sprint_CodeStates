{"ast":null,"code":"import fetch from 'node-fetch';\nexport function getFlight() {\n  var filterBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // HINT: 가장 마지막 테스트를 통과하기 위해, fetch를 이용합니다. 아래 구현은 완전히 삭제되어도 상관없습니다.\n  // TODO: 아래 구현을 REST API 호출로 대체하세요.\n  var url = 'http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight';\n  var departure = filterBy.departure;\n  var destination = filterBy.destination;\n\n  if (departure && destination) {\n    url = \"http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?departure=\".concat(departure, \"&destination=\").concat(destination);\n  }\n\n  return fetch(url).then(function (data) {\n    return data.json();\n  }); // .then((json) => {\n  //   return new Promise((resolve) => {   // fetch API 자체가 Promise 객체를 선언한 것과 같은데, 왜 Promise를 사용??\n  //     setTimeout(() => {                // => setTimeout API 때문에 Web APIs에 비동기 함수가 담기고 아직 처리되지 않았기 때문에 Promise를 사용하므로서 기다려주기 위함이다.\n  //       resolve(json);\n  //     }, 500)})\n  // });\n}","map":{"version":3,"sources":["/home/minjman/Desktop/github/Sprint/im-sprint-statesairline-client/api/FlightDataApi.js"],"names":["fetch","getFlight","filterBy","url","departure","destination","then","data","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,OAAO,SAASC,SAAT,GAAkC;AAAA,MAAfC,QAAe,uEAAJ,EAAI;AACvC;AACA;AACA,MAAIC,GAAG,GAAG,yEAAV;AACA,MAAIC,SAAS,GAAGF,QAAQ,CAACE,SAAzB;AACA,MAAIC,WAAW,GAAGH,QAAQ,CAACG,WAA3B;;AAEA,MAAGD,SAAS,IAAIC,WAAhB,EAA6B;AAC3BF,IAAAA,GAAG,+FAAwFC,SAAxF,0BAAiHC,WAAjH,CAAH;AACD;;AAED,SAAOL,KAAK,CAACG,GAAD,CAAL,CACJG,IADI,CACC,UAACC,IAAD,EAAU;AACd,WAAOA,IAAI,CAACC,IAAL,EAAP;AACD,GAHI,CAAP,CAXuC,CAerC;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import fetch from 'node-fetch'\n\nexport function getFlight(filterBy = {}) {\n  // HINT: 가장 마지막 테스트를 통과하기 위해, fetch를 이용합니다. 아래 구현은 완전히 삭제되어도 상관없습니다.\n  // TODO: 아래 구현을 REST API 호출로 대체하세요.\n  let url = 'http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight';\n  let departure = filterBy.departure;\n  let destination = filterBy.destination;\n\n  if(departure && destination) {\n    url = `http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?departure=${departure}&destination=${destination}`;\n  }\n\n  return fetch(url)\n    .then((data) => {\n      return data.json()\n    });\n    // .then((json) => {\n    //   return new Promise((resolve) => {   // fetch API 자체가 Promise 객체를 선언한 것과 같은데, 왜 Promise를 사용??\n    //     setTimeout(() => {                // => setTimeout API 때문에 Web APIs에 비동기 함수가 담기고 아직 처리되지 않았기 때문에 Promise를 사용하므로서 기다려주기 위함이다.\n    //       resolve(json);\n    //     }, 500)})\n    // });\n}"]},"metadata":{},"sourceType":"module"}